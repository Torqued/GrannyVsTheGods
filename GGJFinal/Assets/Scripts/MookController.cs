//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;

/// <summary>
/// Player controller and behavior
/// </summary>
public class MookController : MonoBehaviour
{

		// which god is it a minion of?
		public bool godType; // true is god A, false is god B

		BoredomBar godBar; // either bar A or B

		/// <summary>
		/// 1 - The speed of the ship
		/// </summary>
		public Vector2 speed = new Vector2 (-5, 0);
		public Vector2 waveSpeed = new Vector2 (0, 1);
		public int hp = 3;
		public float stoppingDistance = 2f; //distance at which cherub stops and starts punching
		private float distanceFromPlayer;
		private GameObject player;

		// 2 - Store the movement
		private Vector2 movement;
		GameObject globalData;					// GameObject containing player data and HashIDs
		HashIDs hash;							// The HashIDs
		Animator animator; 						// Controls animation

		MinionGenerator generator;
		private int dir = 1;
		bool facingRight = false;

		void Awake ()
		{
				player = GameObject.FindGameObjectWithTag ("Player");
				distanceFromPlayer = Vector2.Distance (player.transform.position, transform.position);
				globalData = GameObject.FindGameObjectWithTag ("GameController");
				animator = GetComponent<Animator> ();
				hash = globalData.GetComponent<HashIDs> ();
				generator = GameObject.FindGameObjectWithTag ("EnemyGenerator").GetComponent<MinionGenerator> ();

				if (godType) {
						godBar = GameObject.FindGameObjectWithTag ("BoredomBarA").GetComponent<BoredomBar> ();
				} else {
						godBar = GameObject.FindGameObjectWithTag ("BoredomBarB").GetComponent<BoredomBar> ();
				}
		}

		void Update ()
		{
				distanceFromPlayer = Vector2.Distance (player.transform.position, transform.position);
				Fly ();

				if (distanceFromPlayer <= stoppingDistance) {
						animator.SetBool (hash.attackBool, true);
						
				} else
						animator.SetBool (hash.attackBool, false);

		}

		void Fly ()
		{		
				bool hurting = (animator.GetCurrentAnimatorStateInfo (0).nameHash == hash.hurtState);

				if (Mathf.Abs (player.transform.position.x - transform.position.x) < 0.2f) {
						// 4 - Movement per direction
						if (!hurting)
								movement = new Vector2 (
				speed.x * dir,
				speed.y + waveSpeed.y * Mathf.Sin (Time.time * 5)) / 5;
						else
								movement = new Vector2 (0, 0);
						return;
				}

			
				if (transform.position.x < player.transform.position.x && !facingRight) {
						Flip ();
				}
			
				if (transform.position.x > player.transform.position.x && facingRight) {
						Flip ();
				} 

				
				// 4 - Movement per direction
				if (!hurting)
						movement = new Vector2 (
					speed.x * dir,
					speed.y + waveSpeed.y * Mathf.Sin (Time.time * 5)) / 5;
				else
						movement = new Vector2 (0, 0);

				// 4 - Movement per direction
				//movement = new Vector2 (
				//speed.x * dir,
				//speed.y + waveSpeed.y * Mathf.Sin (Time.time * 5)) / 5;
		}
		
		void Flip ()
		{
				// Switch the way the player is labelled as facing.
				facingRight = !facingRight;
		
				dir *= -1;
		
				// make the player face different direction
				transform.Rotate (0.0f, 180.0f, 0.0f);
		}

		void OnTriggerEnter2D (Collider2D other)
		{
				if (other.gameObject.tag == "Melee") {
						animator.SetTrigger (hash.hurtTrigger);
						hp -= 1; //HURT ENEMY
			
						MakeSound ();
						if (hp <= 0) {
								Die ();
								// also send message to respective god boredom bar
								godBar.Entertained (1);
						}
				}

				if (other.gameObject.tag == "WallTrigger") {
						GameObject.DestroyObject (this.gameObject);
						if (generator.total > 0)
								generator.total--;
				}

				if (other.gameObject.tag == "ExcitedAttack1") {
						Invoke ("Die", 1);
				}

				if (other.gameObject.tag == "ExcitedAttack2") {
						Invoke ("Die", 1);
				}


		}
		
		void OnTriggerStay2D (Collider2D other)
		{
				if (other.gameObject.tag == "Bottom") {
						animator.SetTrigger (hash.hurtTrigger);
						MakeSound ();
						hp -= 1; //HURT ENEMY
						if (hp <= 0) {
								Die ();
								// also send message to respective god boredom bar
								godBar.Entertained (0);


						}
				}
		}

		void Die ()
		{
				GameObject cam = GameObject.FindGameObjectWithTag ("MainCamera");
				CamShake shaker = cam.GetComponent<CamShake> ();
				shaker.Shake ();
				shaker.shake_decay = 0.05f;
				SpawnHitEffect (Resources.Load ("Effects/normHit") as GameObject);

				GameObject bloodyBits = Resources.Load ("Effects/Bloody Bits") as GameObject;
				Instantiate (bloodyBits, transform.position, Quaternion.identity);
				if (generator.total > 0)
						generator.total--;
				Destroy (this.gameObject);
		}

		void FixedUpdate ()
		{
				// 5 - Move the game object
				rigidbody2D.velocity = movement;
		}

		void SpawnHitEffect (GameObject effect)
		{
				Animator playerAnimator = player.GetComponent<Animator> ();
				if (playerAnimator.GetCurrentAnimatorStateInfo (0).nameHash == hash.shoeState)
						effect = Resources.Load ("Effects/HitEffect") as GameObject;
				Instantiate (effect, transform.position, Quaternion.identity);
		}
	
		void MakeSound ()
		{
				//audio.clip = clip;
				audio.Play ();
		}
}
